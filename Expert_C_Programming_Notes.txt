1.假如判断语句写成if（i=3）,编译器不会报错；而写成if（3=i）会报“试图向常数赋值”的错误；
  所以，这里编写判断语句的技巧是：if（3==i）,常数在变量前面；
  
2.有符号数和无符号数的比较过程中，有符号数会转变成无符号数，容易造成程序bug
  比如：size_t strlen(char const *string);  // 返回值：无符号整型
		int array[]={ 23,34,12,17,204,99,16 };
		#define TOTAL_ELEMENTS (sizeof(array)/sizeof(array[0]))
		
        bool flag = FALSE;
		// strlen返回无符号数，在比较过程中，-1被转换为无符号（65535），判断语句不成立。
		if(strlen(“123”) > -1) 
		{
			flag = TRUE;
		}
		// TOTAL_ELEMENTS为无符号(sizeof返回无符号数)，在比较过程中，-1被转换为无符号（65535），判断语句不成立。
		if(TOTAL_ELEMENTS > -1) 
		{
			flag = TRUE;
		}		
	上例中的TOTAL_ELEMENTS定义为：
		#define TOTAL_ELEMENTS (sizeof(array)/sizeof(array[0]))
	而不是：
		#define TOTAL_ELEMENTS (sizeof(array)/sizeof(int))
	因为前者可以在不修改#define语句的情况下改变数组的基本类型（比如：int修改为char）。
	
3.malloc与new分配内存的不同点：
	malloc的函数声明：
		void *malloc(size_t size);// 备注：void* 表示未确定类型的指针，void *可以指向任何类型的
	返回值：
		如果分配成功则返回指向被分配内存的指针(此存储区中的初始值不确定)，否则返回空指针NULL。当内存不再使用时，应使用free()函数将内存块释放。
	注意：ANSIC标准规定，该函数返回为void型指针，因此必要时要进行类型转换（强制转换为当前指针类型）。
	例如：
		int *p;
		p = (int*)malloc(sizeof(int) * 128);
		//分配128个（可根据实际需要替换该数值）整型存储单元，
		//并将这128个连续的整型存储单元的首地址存储到指针变量p中
	
	NEW:malloc 和 new 至少有两个不同: new 返回指定类型的指针，并且可以自动计算所需要大小。比如：
		int *p;
		int *parr;	
		p = new int;
		//返回类型为int *类型(整数型指针)，分配大小为sizeof(int);	
		parr = new int[100];
		//返回类型为int *类型(整数型指针)，分配大小为sizeof(int) * 100;
	
	注意：
		第一、malloc 函数返回的是 void * 类型。
			对于C++，如果你写成：p = malloc (sizeof(int)); 则程序无法通过编译，报错：“不能将 void* 赋值给 int * 类型变量”。
			所以必须通过 (int *) 来将强制转换。而对于C，没有这个要求，但为了使C程序更方便的移植到C++中来，建议养成强制转换的习惯。
		第二、函数的实参为 sizeof(int) ，用于指明一个整型数据需要的大小。
			在Linux中可以有这样：malloc(0),这是因为Linux中malloc有一个下限值16Bytes，注意malloc(-1)是禁止的；但是在某些系统中是不允许malloc(0)的。
		在规范的程序中我们有必要按照这样的格式去使用malloc及free:
			1	type *p;
			2	if(NULL == (p = (type*)malloc(sizeof(type))))
			3	/*请使用if来判断,这是有必要的*/
			4	{
			5		perror("error...");
			6		exit(1);
			7	}
			8	.../*其它代码*/
			9	free(p);
			10	p = NULL;/*请加上这句*/
			
4.sizeof和strlen的区别
	char str[20]="0123456789"; 
	int   a=strlen(str); /*a=10;strlen 计算字符串的长度，以\0'为字符串结束标记。 
	int   b=sizeof(str); /*b=20;sizeof 计算的则是分配的数组str[20] 所占的内存空间的大小，不受里面存储的内容影响
    注意：strlen没有计入‘\0’字符，如果要分配空间，需定义为:malloc(strlen(str)+1)
	
5.一个'L'与两个'L'的NULL
	一个'L'的NUL用于结束ACSLL字符串。
	两个'L'的NULL用于什么也指向（空指针）。
	
6.一个switch语句允许有257个case语句（满足一个8bit字符的所有情况）

7.
63页
枚举的特点：#define定义的名字一般在编译时被丢掉，而枚举名字一直在调速器中可见，在调试代码时使用它们。
理解C语言声明的优先级规则：
	A 声明从它的名字开始读取，然后按照优先级顺序依次读取。
	B 优先级从高到低依次是：
	  B.1  声明中被括号括起来的那部分
	  B.2  后缀操作符：
	       括号（）表示这是一个函数，而方括号[]表示这是一个数组。
	  B.3  前缀操作符：星号*表示“指向...的指针”。
	C 如果const和（或）volatile关键字的后面紧跟类型说明符（如int，long等），那么它作用于类型说明符。在其他情况下，const和（或）volatile关键字作用于它左边紧邻的指针星号。
	C语言声明一例：
	char * const *（*next）（）；
	解析：next是一个指向函数的指针，该函数返回另一个指针，该指针指向一个只读的指向char的指针。
	char * （*c[10]）（int **p）；
	解析：c是一个数组【0..9】，它的元素类型是函数指针，该函数形参p一个二级int类型的指针;该函数的返回值指向一个char类型的指针。

一级指针和二级指针：
	一级指针交换变量值，二级指针交换指针地址。

68页
	typedef与#define的区别：
		1.首先，可以用其他类型说明符对宏类型名进行扩展，但对typedef所定义的类型名却不能这样：
      #define peach int
      unsigned peach i; /*没问题,unsigned 扩展为无符号*/
			
      typedef int banana;
      unsigned banana i; /*错误！非法,unsigned 扩展为无符号*/
    2.其次,在连续几个变量的声明中,用typedef定义的类型能保证声明中所有的变量均为同一种类型,而用#define定义的类型则无法保证，如下所示：
      #define int_ptr int*
      int_ptr chalk,cheese; 
	  	/*经过宏扩展，此行变为int * chalk，cheese；chalk为指向int的指针，而cheese则是一个int*/
	  	
	  	typedef char * char_ptr;
	  	char_ptr Bentley,Rolls_Royce;
	  	/*Bentley和Rolls_Royce的类型相同，都是指向char的指针*/
		3.typedef struct fruit{ int weight, price_per_lb; } fruit; 
			声明的两种方式：struct fruit mandarin; 	/* 使用结构标签“fruit” */
											fruit mandarin; 				/* 使用结构类型“fruit” */
		4.结构标签可以取一个“_tag”结尾的名字，使得辨认特定名字变得简单。
		5.strcmp函数比较两个字符串是否相等？当两个字符串相等时，返回值是0.		
      例如：if (!strcmp(s, "volatile")) return QUALIFIER;
        或者#define STRCMP(a,R,b) (strcmp(a,b) R 0)
            if (STRCMP(s, ==,"volatile")) return QUALIFIER;
79页
    理解复杂函数声明:我们可以通过cdecl.c程序，解释这个声明表示什么意思.	

第四章
80页
	区分定义和声明：
		声明:他所说明的并非自身，而是描述其他地方创建的对象。
		定义:它为对象分配内存。
		
	数组与指针不一样：
		extern对象声明告诉编译器对象的类型和名字，对象的内存分配则再别处进行。由于未在声明中为数组分配内存，所以并不需要提供数组的长度信息。
		对于多维数组，需要提供最左边一维之外其他维的长度-这就给编译器足够的信息产生相应的代码。
		
	指针变量：
		char类型指针变量：
		①C/C++语法中输出字符串指针，就是输出字符串，也就是说输出一个char*的指针一定是输出一个字符串，而不会输出指针，其它的类型都不会这样，所以你把它转成void*就会输出地址。
		例子：
		#include<iostream>
		using namespace std;
		
		int main()
		{
			void *pa;
			char a;
			char *p=&a; 
			
			pa = &a;
			cout<<(void*)p<<endl<<a<<endl;
			cout<<pa<<endl;
		}
	文字常量区:
		int main() 
		{ 
			char *name = "fengkewei"; 
			
			char name1[] = "fengkewei"; 
			
			char *name2 = "fengkewei"; 
			
			char *name3 = "woaifengkewei";
			
			int i = 10; 
			
			int j = 10; 
			
			int k = 11;  
			
			return 0;
		}
		&name=0x0013ff5c unsigned char * *
		name=0x004156b8 "fengkewei" unsigned char *
		为什么&name与name的地址不同呢？
			因为name是个字符型变量，该变量的空间分配在栈区，name指向的字符串在文字常量区，而name又是个字符型指针变量，
			它里面所保存的值即为字符串在文字常量区的地址，这也就是为什么指针指向的内容和指针自身的地址不同的原因了。
